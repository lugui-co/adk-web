name: Deploy ADK Web to AWS

on:
  push:
    branches:
      - development
      - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Set environment variables
        run: |
          if [ "${{ github.ref_name }}" == "production" ]; then
            echo "BACKEND_URL=https://agents.lugui.ai" >> $GITHUB_ENV
            echo "S3_BUCKET=adk-web-production" >> $GITHUB_ENV
            echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }}" >> $GITHUB_ENV
          else
            echo "BACKEND_URL=https://agents.dev.lugui.ai" >> $GITHUB_ENV
            echo "S3_BUCKET=adk-web-development" >> $GITHUB_ENV
            echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_DEV }}" >> $GITHUB_ENV
          fi

      - name: Create runtime config
        run: |
          mkdir -p src/assets/config
          echo "{\"backendUrl\": \"${{ env.BACKEND_URL }}\"}" > src/assets/config/runtime-config.json
          cat src/assets/config/runtime-config.json

      - name: Build Angular application
        run: pnpm exec ng build --configuration=production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        run: |
          # Detectar estrutura de build
          if [ -d "dist/agent_framework_web/browser" ]; then
            BUILD_DIR="dist/agent_framework_web/browser"
          else
            BUILD_DIR="dist/agent_framework_web"
          fi
          
          # Sync com cache longo (exceto index.html e runtime-config.json)
          aws s3 sync ${BUILD_DIR}/ s3://${{ env.S3_BUCKET }}/ \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "index.html" \
            --exclude "assets/config/runtime-config.json"
          
          # Upload index.html sem cache
          aws s3 cp ${BUILD_DIR}/index.html s3://${{ env.S3_BUCKET }}/index.html \
            --cache-control "no-cache,no-store,must-revalidate" \
            --content-type "text/html"
          
          # Upload runtime-config.json sem cache
          aws s3 cp ${BUILD_DIR}/assets/config/runtime-config.json s3://${{ env.S3_BUCKET }}/assets/config/runtime-config.json \
            --cache-control "no-cache,no-store,must-revalidate" \
            --content-type "application/json"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Deployment summary
        run: |
          echo "‚úÖ Deploy conclu√≠do com sucesso!"
          echo "üì¶ Bucket S3: ${{ env.S3_BUCKET }}"
          echo "üîó Backend URL: ${{ env.BACKEND_URL }}"
          echo "üåê Environment: ${{ github.ref_name }}"
